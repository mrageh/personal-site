---
title: Rails Routes :As Option Explained
date: 2014-04-05 15:36
tags: rails
---
Last week I started my apprenticeship at thoughtbot and one of my goals for this apprenticeship
is to gain a better understanding of rails. For a long time I found it easy to build web apps
without understanding what rails was really doing. So today am going to take a dive into how
the ```as:``` option works in the routing system.

The main purpose of the routing system in rails is to map the requested URL to
its corresponding controller action. These rules are defined in the config/routes.rb
file using a domain specific language (abbreviated to DSL).

This week I was working on building a user authentication system from scratch. As usual I slipped
back into old habits by initially using resources to generate all of the restful routes for
my users resource.

```ruby
resources :user
```

Luckily I managed to catch myself doing this early on and I rewrote the routes for each individual
action using the HTTP helper methods. I never understood why people would used the ```as:``` option
in their routes file like the example below:

```ruby
get users/:id => users#show, as: my_profile
```

The rails router generates the following route;

<table>
	<tr>
		<th>Prefix</th>
		<th>Verb</th>
		<th>URI   Pattern</th>
		<th>Controller#Action</th>
	</tr>
	<tr>
		<td>my_profile</td>
		<td>GET</td>
		<td>/users/:id(.:format)</td>
		<td>users#show</td>
	</tr>
</table>


This was because the few times I made an individual route for an action I never needed to use the ```as:``` option.

Here is an example where the ```as:``` option is not needed:

```ruby
get signup => users#new
```

This time the rails router generates the following route;

<table>
	<tr>
		<th>Prefix</th>
		<th>Verb</th>
		<th>URI   Pattern</th>
		<th>Controller#Action</th>
	</tr>
	<tr>
		<td>sign_up</td>
		<td>GET</td>
		<td>/sign_up(.:format)</td>
		<td>users#new</td>
	</tr>
</table>

Now here is what’s generated when you require and include a segment key and don’t use the ```as:``` option.

```ruby
get users/:id => users#show
```

Rake routes generates the following route;

<table>
	<tr>
		<th>Prefix</th>
		<th>Verb</th>
		<th>URI   Pattern</th>
		<th>Controller#Action</th>
	</tr>
	<tr>
		<td>   </td>
		<td>GET</td>
		<td>/users/:id(.:format)</td>
		<td>users#show</td>
	</tr>
</table>


The generated route has no prefix. At first all might seem well because the rake routes command
produced a route and not a error. However the prefix command is used to generate path and url
helpers for the controllers and views in a rails application. Thus without a prefix the following path
helper cannot be used  `user_path(params[:id])`.  If you do try to use it this is the error message
that gets generated by a rails controller.

```ruby
"NoMethodError: undefined method user_url for #<UsersController:0x007f9c94e04038>"
```

Using the below code in your routes file would fix this problem.

```ruby
get users/:id => users#show, as: user
```

Rake routes generates the following route;

<table>
	<tr>
		<th>Prefix</th>
		<th>Verb</th>
		<th>URI  Pattern</th>
		<th>Controller#Action</th>
	</tr>
	<tr>
		<td>user</td>
		<td>GET</td>
		<td>/users/:id(.:format)</td>
		<td>users#show</td>
	</tr>
</table>

In conclusion its important to use the ```as:``` option key when your route requires segment keys. It
should also be used if you need to specify a custom route like sign_up instead of users_new.
