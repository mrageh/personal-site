---
title: gSchool Third Week Retrospective
date: 2013-09-30 20:45
tags: gSchool
---

The first week that I actually started to see some major progress and really understand OOP. The project that I applied a lot of these concepts to is called Sales Engine. It was amazing to see myself write actual test cases and then write code to get my test to pass, I also split my code into separate classes & methods.

I was comfortable with applying a lot of the concepts from last week to this project and I started to push the bar and tried to learn new concepts. One thing I know that programmers hate doing is writing code that repeats itself a lot, I think its called DRY (Don't Repeat Yourself). As far as I understand repetition is frowned upon and writing code that does the same thing across 50 lines is strongly disliked!!!

I had a group of methods in my project that did the exact same thing across 50 lines to different variables. So to try and challenge myself I used meta programming, to help me remove a lot of the repetition. After a lot of frustration I managed to write code that writes code, that is what meta programming is, cool right.

This project was a two week long project and we had to work in pairs. Pair programming is a agile methodology where two partners work of one file. We used screen hero, and we would switch every 25 minutes. Each person had to try and explain their thought process when coding and the other person had to be the guide and check for mistakes. At first I found pair programming to be kind  of restricting, because you have to explain your thinking to your partner before you start to write code and my partner really enforced testing first before we wrote any code. Which I found very tedious to begin with. As we went further on in the project the tests we wrote helped get us out of tight spots and it made refactoring our code a lot easier. The fact that I had to explain my thinking to my partner and vice versa really helped us 'understand' the problem instead of mindlessly hacking away and helped us be more productive. Another great thing about pairing was one of us was always bound to pick up on small mistakes like methods, variables being misspelled or missing semi colons. So pair programming ended up saving us a lot of head ache and time, in the end we produced better code and we became more productive.

To round up the week we attended the rocky mountain ruby conference in Boulder. We met some awesome developers, listened to great talks most of which were far beyond our current skill level and understanding. In the end we got a lot of free gifts, added valuable ruby gems to our network and got some great advice on how to become great junior developers. The more I stay in Denver the more I realize just how much I enjoy this atmosphere and the tech community here in Colorado.
